diff --git a/compiler/src/main/java/dagger/internal/codegen/FullGraphProcessor.java b/compiler/src/main/java/dagger/internal/codegen/FullGraphProcessor.java
index efe994e..3bc36f4 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FullGraphProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FullGraphProcessor.java
@@ -24,6 +24,7 @@
 import java.io.Writer;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
@@ -51,13 +52,29 @@
 @SupportedAnnotationTypes("dagger.Module")
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public final class FullGraphProcessor extends AbstractProcessor {
+  private final Set<String> delayedModuleNames = new HashSet<String>();
+
   /**
    * Perform full-graph analysis on complete modules. This checks that all of
    * the module's dependencies are satisfied.
    */
   @Override public boolean process(Set<? extends TypeElement> types, RoundEnvironment env) {
     try {
-      for (Element element : env.getElementsAnnotatedWith(Module.class)) {
+      if (!env.processingOver()) {
+        // Storing module names for later retrieval as the element instance remains invalid across
+        // passes.
+        for (Element e : env.getElementsAnnotatedWith(Module.class)) {
+          delayedModuleNames.add(e.asType().toString());
+        }
+        return true;
+      }
+
+      Set<Element> modules = new HashSet<Element>();
+      for (String moduleName : delayedModuleNames) {
+        modules.add(processingEnv.getElementUtils().getTypeElement(moduleName));
+      }
+
+      for (Element element : modules) {
         Map<String, Object> annotation = CodeGen.getAnnotation(Module.class, element);
         if (!annotation.get("complete").equals(Boolean.TRUE)) {
           continue;
@@ -65,6 +82,7 @@
         TypeElement moduleType = (TypeElement) element;
         Map<String, Binding<?>> bindings = processCompleteModule(moduleType);
         writeDotFile(moduleType, bindings);
+        delayedModuleNames.remove(element.asType().toString());
       }
     } catch (IOException e) {
       error("Graph processing failed: " + e);
/Fim/
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectProcessor.java b/compiler/src/main/java/dagger/internal/codegen/InjectProcessor.java
index 594e485..671fe42 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectProcessor.java
@@ -20,6 +20,8 @@
 import dagger.internal.StaticInjection;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
@@ -36,6 +38,7 @@
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.tools.Diagnostic;
 import javax.tools.JavaFileObject;
@@ -53,19 +56,67 @@
 @SupportedAnnotationTypes("javax.inject.Inject")
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public final class InjectProcessor extends AbstractProcessor {
+  private final Set<String> delayedInjectedClassNames = new HashSet<String>();
+
   @Override public boolean process(Set<? extends TypeElement> types, RoundEnvironment env) {
     try {
-      for (InjectedClass injectedClass : getInjectedClasses(env)) {
-        if (injectedClass.constructor != null || !injectedClass.fields.isEmpty()) {
-          writeInjectAdapter(injectedClass.type, injectedClass.constructor, injectedClass.fields);
-        }
-        if (!injectedClass.staticFields.isEmpty()) {
-          writeStaticInjection(injectedClass.type, injectedClass.staticFields);
+      final Set<InjectedClass> injectedClasses = new HashSet<InjectedClass>();
+      injectedClasses.addAll(getInjectedClasses(env));
+      for (final String e : delayedInjectedClassNames) {
+        // Refetching delayed elements by name as previous element object could not resolve
+        // now-available types.
+        injectedClasses.add(getInjectedClass(processingEnv.getElementUtils().getTypeElement(e)));
+      }
+
+      for (InjectedClass injectedClass : injectedClasses) {
+        final String injectedClassName = injectedClass.type.toString();
+        // Verify that we have access to all types to be injected on this pass.
+        final boolean missingDependentClasses =
+            !allTypesExist(injectedClass.fields)
+            || (injectedClass.constructor != null && !allTypesExist(injectedClass.constructor
+                .getParameters()))
+            || !allTypesExist(injectedClass.staticFields);
+        if (missingDependentClasses) {
+          // Injections delayed for this class. Store its type name for later retrieval.
+          delayedInjectedClassNames.add(injectedClassName);
+        } else {
+          writeInjectionsForClass(injectedClass);
+          // In case this class was delayed in an earlier pass, remove it so we don't
+          // re-process it.
+          delayedInjectedClassNames.remove(injectedClassName);
         }
       }
     } catch (IOException e) {
       error("Code gen failed: %s", e);
     }
+    if (env.processingOver() && delayedInjectedClassNames.size() > 0) {
+      error("Could not find injection type required by %s!", delayedInjectedClassNames.toString());
+    }
+    return true;
+  }
+
+  private void writeInjectionsForClass(InjectedClass injectedClass) throws IOException {
+    if (injectedClass.constructor != null || !injectedClass.fields.isEmpty()) {
+      writeInjectAdapter(injectedClass.type, injectedClass.constructor, injectedClass.fields);
+    }
+    if (!injectedClass.staticFields.isEmpty()) {
+      writeStaticInjection(injectedClass.type, injectedClass.staticFields);
+    }
+  }
+
+  /**
+   * Check that all element types are currently available in this code
+   * generation pass. Unavailable types will be of kind {@link TypeKind#ERROR}.
+   * @param elements
+   *          the elements to check
+   * @return true, if all types are available
+   */
+  private boolean allTypesExist(Collection<? extends Element> elements) {
+    for (Element element : elements) {
+      if (element.asType().getKind() == TypeKind.ERROR) {
+        return false;
+      }
+    }
     return true;
   }
 
@@ -149,6 +200,10 @@
     processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format(format, args));
   }
 
+  private void log(String format, Object... args) {
+    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, String.format(format, args));
+  }
+
   /**
    * Write a companion class for {@code type} that extends {@link Binding}.
    *
/Fim/
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvidesProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ProvidesProcessor.java
index 04cc804..2f0040f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvidesProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvidesProcessor.java
@@ -60,25 +60,50 @@
 @SupportedAnnotationTypes("dagger.Provides")
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public final class ProvidesProcessor extends AbstractProcessor {
+  private final Map<String, List<ExecutableElement>> delayedTypes =
+      new HashMap<String, List<ExecutableElement>>();
   private static final String BINDINGS_MAP = CodeGen.parameterizedType(
       Map.class, String.class.getName(), Binding.class.getName() + "<?>");
 
   // TODO: include @Provides methods from the superclass
 
   @Override public boolean process(Set<? extends TypeElement> types, RoundEnvironment env) {
+
     try {
       Map<TypeElement, List<ExecutableElement>> providerMethods = providerMethodsByClass(env);
+      for (Map.Entry<String, List<ExecutableElement>> module : delayedTypes.entrySet()) {
+        providerMethods.put(
+            processingEnv.getElementUtils().getTypeElement(module.getKey()), module.getValue());
+      }
       for (Map.Entry<TypeElement, List<ExecutableElement>> module : providerMethods.entrySet()) {
-        writeModuleAdapter(module.getKey(), module.getValue());
+        final TypeElement type = module.getKey();
+        final String providesName = type.asType().toString();
+        try {
+          // Attempt to get the annotation. If types are missing, this will throw
+          // IllegalStateException.
+          Map<String, Object> parsedAnnotation = CodeGen.getAnnotation(Module.class, type);
+          writeModuleAdapter(type, parsedAnnotation, module.getValue());
+          delayedTypes.remove(providesName);
+        } catch (IllegalStateException e) {
+          delayedTypes.put(providesName, module.getValue());
+        }
       }
     } catch (IOException e) {
       error("Code gen failed: " + e);
     }
+    if (env.processingOver() && delayedTypes.size() > 0) {
+      error("Could not find types required by provides methods for %s", delayedTypes.keySet()
+          .toString());
+    }
     return true;
   }
 
-  private void error(String message) {
-    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, message);
+  private void error(String format, Object... args) {
+    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format(format, args));
+  }
+
+  private void log(String format, Object... args) {
+    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, String.format(format, args));
   }
 
   /**
@@ -131,9 +156,8 @@
    * Write a companion class for {@code type} that implements {@link
    * ModuleAdapter} to expose its provider methods.
    */
-  private void writeModuleAdapter(TypeElement type, List<ExecutableElement> providerMethods)
-      throws IOException {
-    Map<String, Object> module = CodeGen.getAnnotation(Module.class, type);
+  private void writeModuleAdapter(TypeElement type, Map<String, Object> module,
+      List<ExecutableElement> providerMethods) throws IOException {
     if (module == null) {
       error(type + " has @Provides methods but no @Module annotation");
       return;
/Fim/
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectProcessor.java b/compiler/src/main/java/dagger/internal/codegen/InjectProcessor.java
index 671fe42..58e525f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectProcessor.java
@@ -60,18 +60,18 @@
 
   @Override public boolean process(Set<? extends TypeElement> types, RoundEnvironment env) {
     try {
-      final Set<InjectedClass> injectedClasses = new HashSet<InjectedClass>();
+      Set<InjectedClass> injectedClasses = new HashSet<InjectedClass>();
       injectedClasses.addAll(getInjectedClasses(env));
-      for (final String e : delayedInjectedClassNames) {
+      for (String e : delayedInjectedClassNames) {
         // Refetching delayed elements by name as previous element object could not resolve
         // now-available types.
         injectedClasses.add(getInjectedClass(processingEnv.getElementUtils().getTypeElement(e)));
       }
 
       for (InjectedClass injectedClass : injectedClasses) {
-        final String injectedClassName = injectedClass.type.toString();
+        String injectedClassName = injectedClass.type.toString();
         // Verify that we have access to all types to be injected on this pass.
-        final boolean missingDependentClasses =
+        boolean missingDependentClasses =
             !allTypesExist(injectedClass.fields)
             || (injectedClass.constructor != null && !allTypesExist(injectedClass.constructor
                 .getParameters()))
@@ -200,10 +200,6 @@
     processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format(format, args));
   }
 
-  private void log(String format, Object... args) {
-    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, String.format(format, args));
-  }
-
   /**
    * Write a companion class for {@code type} that extends {@link Binding}.
    *
/Fim/
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvidesProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ProvidesProcessor.java
index 2f0040f..4be84ed 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvidesProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvidesProcessor.java
@@ -76,8 +76,8 @@
             processingEnv.getElementUtils().getTypeElement(module.getKey()), module.getValue());
       }
       for (Map.Entry<TypeElement, List<ExecutableElement>> module : providerMethods.entrySet()) {
-        final TypeElement type = module.getKey();
-        final String providesName = type.asType().toString();
+        TypeElement type = module.getKey();
+        String providesName = type.asType().toString();
         try {
           // Attempt to get the annotation. If types are missing, this will throw
           // IllegalStateException.
@@ -102,10 +102,6 @@
     processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format(format, args));
   }
 
-  private void log(String format, Object... args) {
-    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, String.format(format, args));
-  }
-
   /**
    * Returns a map containing all {@code @Provides} methods, indexed by class.
    */
/Fim/
