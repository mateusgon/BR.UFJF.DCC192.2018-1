diff --git a/README.md b/README.md
index bc561df..fc1d1e5 100644
--- a/README.md
+++ b/README.md
@@ -163,7 +163,7 @@
 
 ### Lazy injections
 
-Sometimes you need to make a dependency lazily created.  For any binding `T`, you can create a `Lazy<T>` which defers instantiation until the first call to `Lazy<T>`'s `get()` method. If `T` is a singleton, then `Lazy<T>` will be the same instance for all injections within the ObjectGraph.  Otherwise, each injection site will get its own `Lazy<T>` instance.  Regardless, subsequent calls to any given instance of `Lazy<T>` will return the same underlying instance of `T`.
+Sometimes you need to create a dependency lazily.  For any binding `T`, you can create a `Lazy<T>` which defers instantiation until the first call to `Lazy<T>`'s `get()` method. If `T` is a singleton, then `Lazy<T>` will be the same instance for all injections within the `ObjectGraph`.  Otherwise, each injection site will get its own `Lazy<T>` instance.  Regardless, subsequent calls to any given instance of `Lazy<T>` will return the same underlying instance of `T`.
 
 ```java
 class GridingCoffeeMaker {
@@ -216,7 +216,7 @@
 }
 ```
 
-Create your own qualifier annotations just use `@Named`. Apply qualifiers by annotating the field or parameter of interest. The type and qualifier annotation will both be used to identify the dependency.
+To create your own qualifier annotations just use `@Named`. Apply qualifiers by annotating the field or parameter of interest. The type and qualifier annotation will both be used to identify the dependency.
 
 ```java
 class ExpensiveCoffeeMaker {
@@ -282,7 +282,7 @@
                required by provideHeater(java.util.concurrent.Executor)
 ```
 
-Fix the problem either by adding the an `@Provides`-annotated method for `Executor`, or by marking the module as incomplete. Incomplete modules are permitted to have missing dependencies.
+Fix the problem either by adding an `@Provides`-annotated method for `Executor`, or by marking the module as incomplete. Incomplete modules are permitted to have missing dependencies.
 
 ```java
 @Module(complete = false)
@@ -358,7 +358,7 @@
 Using Dagger in your build
 ==========================
 
-You will need to include the dagger-${dagger.version}.jar in your application's runtime.  In order to activate code generation you will need to include dagger-compiler-${dagger.version}.jar in your build at compile time. 
+You will need to include the `dagger-${dagger.version}.jar` in your application's runtime.  In order to activate code generation you will need to include `dagger-compiler-${dagger.version}.jar` in your build at compile time. 
 
 In a Maven project, one would include the runtime in the dependencies section of your `pom.xml` (replacing ${dagger.version} with the appropriate current release), and the dagger-compiler artifact as a dependency of the compiler plugin: 
 
/Fim/
diff --git a/README.md b/README.md
index fc1d1e5..e7b8269 100644
--- a/README.md
+++ b/README.md
@@ -163,7 +163,7 @@
 
 ### Lazy injections
 
-Sometimes you need to create a dependency lazily.  For any binding `T`, you can create a `Lazy<T>` which defers instantiation until the first call to `Lazy<T>`'s `get()` method. If `T` is a singleton, then `Lazy<T>` will be the same instance for all injections within the `ObjectGraph`.  Otherwise, each injection site will get its own `Lazy<T>` instance.  Regardless, subsequent calls to any given instance of `Lazy<T>` will return the same underlying instance of `T`.
+Sometimes you need an object to be instantiated lazily.  For any binding `T`, you can create a `Lazy<T>` which defers instantiation until the first call to `Lazy<T>`'s `get()` method. If `T` is a singleton, then `Lazy<T>` will be the same instance for all injections within the `ObjectGraph`.  Otherwise, each injection site will get its own `Lazy<T>` instance.  Regardless, subsequent calls to any given instance of `Lazy<T>` will return the same underlying instance of `T`.
 
 ```java
 class GridingCoffeeMaker {
/Fim/
diff --git a/README.md b/README.md
index e7b8269..d43b142 100644
--- a/README.md
+++ b/README.md
@@ -216,7 +216,7 @@
 }
 ```
 
-To create your own qualifier annotations just use `@Named`. Apply qualifiers by annotating the field or parameter of interest. The type and qualifier annotation will both be used to identify the dependency.
+To create your own qualifier annotations, or just use `@Named`. Apply qualifiers by annotating the field or parameter of interest. The type and qualifier annotation will both be used to identify the dependency.
 
 ```java
 class ExpensiveCoffeeMaker {
/Fim/
