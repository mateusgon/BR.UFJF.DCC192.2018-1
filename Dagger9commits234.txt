diff --git a/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisLoader.java b/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisLoader.java
index 8fd401a..c3cd022 100644
--- a/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisLoader.java
+++ b/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisLoader.java
@@ -54,7 +54,7 @@
     return GraphAnalysisInjectBinding.create(type, mustHaveInjections);
   }
 
-  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> moduleClass, T module) {
+  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> moduleClass) {
     throw new UnsupportedOperationException();
   }
 
/Fim/
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java
index 4e65315..ff87d24 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java
@@ -302,8 +302,8 @@
 
     writer.emitEmptyLine();
     writer.beginMethod(null, adapterName, EnumSet.of(PUBLIC));
-    writer.emitStatement("super(INJECTS, STATIC_INJECTIONS, %s /*overrides*/, "
-        + "INCLUDES, %s /*complete*/, %s /*library*/)", overrides, complete, library);
+    writer.emitStatement("super(%s.class, INJECTS, STATIC_INJECTIONS, %s /*overrides*/, "
+        + "INCLUDES, %s /*complete*/, %s /*library*/)", typeName,  overrides, complete, library);
     writer.endMethod();
 
     ExecutableElement noArgsConstructor = getNoArgsConstructor(type);
@@ -323,7 +323,8 @@
       writer.emitEmptyLine();
       writer.emitJavadoc(AdapterJavadocs.GET_DEPENDENCIES_METHOD);
       writer.emitAnnotation(Override.class);
-      writer.beginMethod("void", "getBindings", EnumSet.of(PUBLIC), BINDINGS_MAP, "map");
+      writer.beginMethod("void", "getBindings", EnumSet.of(PUBLIC), BINDINGS_MAP, "map",
+          typeName, "module");
 
       for (ExecutableElement providerMethod : providerMethods) {
         Provides provides = providerMethod.getAnnotation(Provides.class);
/Fim/
diff --git a/core/src/main/java/dagger/ObjectGraph.java b/core/src/main/java/dagger/ObjectGraph.java
index 1d77816..c6590b0 100644
--- a/core/src/main/java/dagger/ObjectGraph.java
+++ b/core/src/main/java/dagger/ObjectGraph.java
@@ -22,15 +22,16 @@
 import dagger.internal.Linker;
 import dagger.internal.Loader;
 import dagger.internal.ModuleAdapter;
+import dagger.internal.Modules;
 import dagger.internal.ProblemDetector;
 import dagger.internal.SetBinding;
 import dagger.internal.StaticInjection;
 import dagger.internal.ThrowingErrorHandler;
 import dagger.internal.UniqueMap;
+import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.Map;
-
-import static dagger.internal.Modules.getAllModuleAdapters;
+import java.util.Map.Entry;
 
 
 /**
@@ -135,9 +136,9 @@
   static class DaggerObjectGraph extends ObjectGraph {
     private final DaggerObjectGraph base;
     private final Linker linker;
+    private final Loader plugin;
     private final Map<Class<?>, StaticInjection> staticInjections;
     private final Map<String, Class<?>> injectableTypes;
-    private final Loader plugin;
 
     DaggerObjectGraph(DaggerObjectGraph base,
         Linker linker,
@@ -180,17 +181,23 @@
           return super.put(key, value);
         }
       };
-      for (ModuleAdapter<?> moduleAdapter : getAllModuleAdapters(plugin, modules).values()) {
+
+      Map<ModuleAdapter<?>, Object> loadedModules =
+          Modules.loadModules(plugin, Arrays.asList(modules));
+      for (Entry<ModuleAdapter<?>, Object> loadedModule : loadedModules.entrySet()) {
+        @SuppressWarnings("unchecked")
+        ModuleAdapter<Object> moduleAdapter = (ModuleAdapter<Object>) loadedModule.getKey();
         for (int i = 0; i < moduleAdapter.injectableTypes.length; i++) {
-          injectableTypes.put(moduleAdapter.injectableTypes[i], moduleAdapter.getModuleClass());
+          injectableTypes.put(moduleAdapter.injectableTypes[i], moduleAdapter.moduleClass);
         }
         for (int i = 0; i < moduleAdapter.staticInjections.length; i++) {
           staticInjections.put(moduleAdapter.staticInjections[i], null);
         }
         try {
-          moduleAdapter.getBindings(moduleAdapter.overrides ? overrideBindings : baseBindings);
+          Map<String, Binding<?>> addTo = moduleAdapter.overrides ? overrideBindings : baseBindings;
+          moduleAdapter.getBindings(addTo, loadedModule.getValue());
         } catch (IllegalArgumentException e) {
-          throw new IllegalArgumentException(moduleAdapter.getModuleClass().getSimpleName()
+          throw new IllegalArgumentException(moduleAdapter.moduleClass.getSimpleName()
               + " is an overriding module and cannot contribute set bindings.");
         }
       }
@@ -200,7 +207,8 @@
       linker.installBindings(baseBindings);
       linker.installBindings(overrideBindings);
 
-      return new DaggerObjectGraph(base, linker, plugin, staticInjections, injectableTypes);
+      return new DaggerObjectGraph(base, linker, plugin, staticInjections,
+          injectableTypes);
     }
 
     @Override public ObjectGraph plus(Object... modules) {
/Fim/
diff --git a/core/src/main/java/dagger/internal/FailoverLoader.java b/core/src/main/java/dagger/internal/FailoverLoader.java
index 0f2a6e1..350bd8f 100644
--- a/core/src/main/java/dagger/internal/FailoverLoader.java
+++ b/core/src/main/java/dagger/internal/FailoverLoader.java
@@ -36,18 +36,25 @@
    * be wasteful in terms of both CPU and memory allocated.
    */
 
+  private final LruCache<Class<?>, ModuleAdapter<?>> loadedAdapters =
+      new LruCache<Class<?>, ModuleAdapter<?>>(Integer.MAX_VALUE) {
+    @Override protected ModuleAdapter<?> create(Class<?> type) {
+      ModuleAdapter<?> result =
+          instantiate(type.getName().concat(MODULE_ADAPTER_SUFFIX), type.getClassLoader());
+      if (result == null) {
+        throw new IllegalStateException("Module adapter for " + type + " could not be loaded. "
+            + "Please ensure that code generation was run for this module.");
+      }
+      return result;
+    }
+  };
+
   /**
    * Obtains a module adapter for {@code module} from the first responding resolver.
    */
-  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> type, T instance) {
-    ModuleAdapter<T> result =
-        instantiate(type.getName().concat(MODULE_ADAPTER_SUFFIX), type.getClassLoader());
-    if (result == null) {
-      throw new IllegalStateException("Module adapter for " + type + " could not be loaded. "
-          + "Please ensure that code generation was run for this module.");
-    }
-    result.module = (instance != null) ? instance : result.newModule();
-    return result;
+  @SuppressWarnings("unchecked") // cache ensures types match
+  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> type) {
+    return (ModuleAdapter<T>) loadedAdapters.get(type);
   }
 
   @Override public Binding<?> getAtInjectBinding(
/Fim/
diff --git a/core/src/main/java/dagger/internal/Loader.java b/core/src/main/java/dagger/internal/Loader.java
index e5bcb08..c367a53 100644
--- a/core/src/main/java/dagger/internal/Loader.java
+++ b/core/src/main/java/dagger/internal/Loader.java
@@ -49,10 +49,10 @@
       String key, String className, ClassLoader classLoader, boolean mustHaveInjections);
 
   /**
-   * Returns a module adapter for {@code module} or throws a {@code TypeNotPresentException} if
+   * Returns a module adapter for {@code moduleClass} or throws a {@code TypeNotPresentException} if
    * none can be found.
    */
-  public abstract <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> moduleClass, T module);
+  public abstract <T> ModuleAdapter<T> getModuleAdapter(Class<T> moduleClass);
 
   /**
    * Returns the static injection for {@code injectedClass}.
/Fim/
diff --git a/core/src/main/java/dagger/internal/ModuleAdapter.java b/core/src/main/java/dagger/internal/ModuleAdapter.java
index 818ec00..43f814b 100644
--- a/core/src/main/java/dagger/internal/ModuleAdapter.java
+++ b/core/src/main/java/dagger/internal/ModuleAdapter.java
@@ -23,16 +23,18 @@
  * Extracts bindings from an {@code @Module}-annotated class.
  */
 public abstract class ModuleAdapter<T> {
+  public final Class<T> moduleClass;
   public final String[] injectableTypes;
   public final Class<?>[] staticInjections;
   public final boolean overrides;
   public final Class<?>[] includes;
   public final boolean complete;
   public final boolean library;
-  protected T module;
 
-  protected ModuleAdapter(String[] injectableTypes, Class<?>[] staticInjections, boolean overrides,
-      Class<?>[] includes, boolean complete, boolean library) {
+  protected ModuleAdapter(Class<T> moduleClass, String[] injectableTypes,
+      Class<?>[] staticInjections, boolean overrides, Class<?>[] includes, boolean complete,
+      boolean library) {
+    this.moduleClass = moduleClass;
     this.injectableTypes = injectableTypes;
     this.staticInjections = staticInjections;
     this.overrides = overrides;
@@ -45,7 +47,8 @@
    * Returns bindings for the {@code @Provides} methods of {@code module}. The
    * returned bindings must be linked before they can be used to inject values.
    */
-  public void getBindings(@SuppressWarnings("unused") Map<String, Binding<?>> map) {
+  public void getBindings(@SuppressWarnings("unused") Map<String, Binding<?>> map,
+      @SuppressWarnings("unused") T module) {
     // no-op;
   }
 
@@ -57,7 +60,20 @@
     throw new UnsupportedOperationException("No no-args constructor on " + getClass().getName());
   }
 
-  public Class<?> getModuleClass() {
-    return module.getClass();
+  @Override
+  final public boolean equals(Object obj) {
+    if (obj == this) {
+      return true;
+    } else if (obj instanceof ModuleAdapter<?>) {
+      ModuleAdapter<?> that = (ModuleAdapter<?>) obj;
+      return this.moduleClass.equals(that.moduleClass);
+    } else {
+      return false;
+    }
+  }
+
+  @Override
+  public final int hashCode() {
+    return moduleClass.hashCode();
   }
 }
/Fim/
diff --git a/core/src/main/java/dagger/internal/Modules.java b/core/src/main/java/dagger/internal/Modules.java
index 36bde75..5458a5a 100644
--- a/core/src/main/java/dagger/internal/Modules.java
+++ b/core/src/main/java/dagger/internal/Modules.java
@@ -18,6 +18,7 @@
 
 
 import java.util.LinkedHashMap;
+import java.util.List;
 import java.util.Map;
 
 /**
@@ -31,35 +32,38 @@
    * Returns a full set of module adapters, including module adapters for included
    * modules.
    */
-  public static Map<Class<?>, ModuleAdapter<?>> getAllModuleAdapters(Loader plugin,
-      Object[] seedModules) {
-    // Create a module adapter for each seed module.
-    ModuleAdapter<?>[] seedAdapters = new ModuleAdapter<?>[seedModules.length];
-    int s = 0;
-    for (Object module : seedModules) {
-      if (module instanceof Class) {
-        seedAdapters[s++] = plugin.getModuleAdapter((Class<?>) module, null); // Loader constructs.
+  public static Map<ModuleAdapter<?>, Object> loadModules(Loader loader,
+      List<Object> seedModulesOrClasses) {
+    Map<ModuleAdapter<?>, Object> seedAdapters =
+        new LinkedHashMap<ModuleAdapter<?>, Object>(seedModulesOrClasses.size());
+    for (Object moduleOrClass : seedModulesOrClasses) {
+      if (moduleOrClass instanceof Class<?>) {
+        ModuleAdapter<?> moduleAdapter = loader.getModuleAdapter((Class<?>) moduleOrClass);
+        seedAdapters.put(moduleAdapter, moduleAdapter.newModule());
       } else {
-        seedAdapters[s++] = plugin.getModuleAdapter(module.getClass(), module);
+        ModuleAdapter<?> moduleAdapter = loader.getModuleAdapter(moduleOrClass.getClass());
+        seedAdapters.put(moduleAdapter, moduleOrClass);
       }
     }
 
-    Map<Class<?>, ModuleAdapter<?>> adaptersByModuleType
-        = new LinkedHashMap<Class<?>, ModuleAdapter<?>>();
-
     // Add the adapters that we have module instances for. This way we won't
     // construct module objects when we have a user-supplied instance.
-    for (ModuleAdapter<?> adapter : seedAdapters) {
-      adaptersByModuleType.put(adapter.getModuleClass(), adapter);
-    }
+    Map<ModuleAdapter<?>, Object> result =
+        new LinkedHashMap<ModuleAdapter<?>, Object>(seedAdapters);
 
-    // Next add adapters for the modules that we need to construct. This creates
-    // instances of modules as necessary.
-    for (ModuleAdapter<?> adapter : seedAdapters) {
-      collectIncludedModulesRecursively(plugin, adapter, adaptersByModuleType);
+    // Next collect included modules
+    Map<Class<?>, ModuleAdapter<?>> transitiveInclusions =
+        new LinkedHashMap<Class<?>, ModuleAdapter<?>>();
+    for (ModuleAdapter<?> adapter : seedAdapters.keySet()) {
+      collectIncludedModulesRecursively(loader, adapter, transitiveInclusions);
     }
-
-    return adaptersByModuleType;
+    // and create them if necessary
+    for (ModuleAdapter<?> dependency : transitiveInclusions.values()) {
+      if (!result.containsKey(dependency)) {
+        result.put(dependency, dependency.newModule());
+      }
+    }
+    return result;
   }
 
   /**
@@ -70,7 +74,7 @@
       Map<Class<?>, ModuleAdapter<?>> result) {
     for (Class<?> include : adapter.includes) {
       if (!result.containsKey(include)) {
-        ModuleAdapter<Object> includedModuleAdapter = plugin.getModuleAdapter(include, null);
+        ModuleAdapter<?> includedModuleAdapter = plugin.getModuleAdapter(include);
         result.put(include, includedModuleAdapter);
         collectIncludedModulesRecursively(plugin, includedModuleAdapter, result);
       }
/Fim/
diff --git a/core/src/test/java/dagger/internal/TestingLoader.java b/core/src/test/java/dagger/internal/TestingLoader.java
index a135d01..b364cde 100644
--- a/core/src/test/java/dagger/internal/TestingLoader.java
+++ b/core/src/test/java/dagger/internal/TestingLoader.java
@@ -25,9 +25,8 @@
  */
 public final class TestingLoader extends Loader {
 
-  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> type, T instance) {
+  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> type) {
     ModuleAdapter<T> adapter = TestingModuleAdapter.create(type);
-    adapter.module = (instance != null) ? instance : adapter.newModule();
     return adapter;
   }
 
/Fim/
diff --git a/core/src/test/java/dagger/internal/TestingModuleAdapter.java b/core/src/test/java/dagger/internal/TestingModuleAdapter.java
index 04dcc5e..eed43e9 100644
--- a/core/src/test/java/dagger/internal/TestingModuleAdapter.java
+++ b/core/src/test/java/dagger/internal/TestingModuleAdapter.java
@@ -31,17 +31,15 @@
 
 //TODO: Reduce the complexity of this and/or replace with a mock or fake.
 public class TestingModuleAdapter<M> extends ModuleAdapter<M> {
-  final Class<?> moduleClass;
-
-  public TestingModuleAdapter(Class<?> moduleClass, Module annotation) {
+  public TestingModuleAdapter(Class<M> moduleClass, Module annotation) {
     super(
+        moduleClass,
         injectableTypesToKeys(annotation.injects()),
         annotation.staticInjections(),
         annotation.overrides(),
         annotation.includes(),
         annotation.complete(),
         annotation.library());
-    this.moduleClass = moduleClass;
   }
 
   private static String[] injectableTypesToKeys(Class<?>[] injectableTypes) {
@@ -55,7 +53,7 @@
     return result;
   }
 
-  @Override public void getBindings(Map<String, Binding<?>> bindings) {
+  @Override public void getBindings(Map<String, Binding<?>> bindings, M module) {
     for (Class<?> c = moduleClass; !c.equals(Object.class); c = c.getSuperclass()) {
       for (Method method : c.getDeclaredMethods()) {
         Provides provides = method.getAnnotation(Provides.class);
@@ -82,15 +80,15 @@
           String key = Keys.get(genericReturnType, method.getAnnotations(), method);
           switch (provides.type()) {
             case UNIQUE:
-              handleBindings(bindings, method, key, library);
+              handleBindings(bindings, module, method, key, library);
               break;
             case SET:
               String setKey = Keys.getSetKey(method.getGenericReturnType(),
                   method.getAnnotations(), method);
-              handleSetBindings(bindings, method, setKey, key, library);
+              handleSetBindings(bindings, module, method, setKey, key, library);
               break;
             case SET_VALUES:
-              handleSetBindings(bindings, method, key, key, library);
+              handleSetBindings(bindings, module, method, key, key, library);
               break;
             default:
               throw new AssertionError("Unknown @Provides type " + provides.type());
@@ -100,14 +98,15 @@
     }
   }
 
-  private void handleBindings(Map<String, Binding<?>> bindings, Method method, String key,
+  private void handleBindings(Map<String, Binding<?>> bindings, M module, Method method, String key,
       boolean library) {
     bindings.put(key, new ProviderMethodBinding<M>(method, key, module, library));
   }
 
-  private void handleSetBindings(Map<String, Binding<?>> bindings, Method method, String setKey,
-      String providerKey, boolean library) {
-    SetBinding.<M>add(bindings, setKey, new ProviderMethodBinding<M>(method, providerKey, module, library));
+  private void handleSetBindings(Map<String, Binding<?>> bindings, M module, Method method,
+      String setKey, String providerKey, boolean library) {
+    SetBinding.<M>add(bindings, setKey,
+        new ProviderMethodBinding<M>(method, providerKey, module, library));
   }
 
   @Override public M newModule() {
@@ -135,7 +134,7 @@
   /**
    * Creates a TestingModuleAdapter or throws an {@code IllegalArgumentException}.
    */
-  public static <M> ModuleAdapter<M> create(Class<? extends M> moduleClass) {
+  public static <M> ModuleAdapter<M> create(Class<M> moduleClass) {
     Module annotation = moduleClass.getAnnotation(Module.class);
     if (annotation == null) {
       throw new IllegalArgumentException("No @Module on " + moduleClass.getName());
/Fim/
diff --git a/core/src/main/java/dagger/internal/FailoverLoader.java b/core/src/main/java/dagger/internal/FailoverLoader.java
index 350bd8f..a9fb260 100644
--- a/core/src/main/java/dagger/internal/FailoverLoader.java
+++ b/core/src/main/java/dagger/internal/FailoverLoader.java
@@ -36,18 +36,18 @@
    * be wasteful in terms of both CPU and memory allocated.
    */
 
-  private final LruCache<Class<?>, ModuleAdapter<?>> loadedAdapters =
-      new LruCache<Class<?>, ModuleAdapter<?>>(Integer.MAX_VALUE) {
-    @Override protected ModuleAdapter<?> create(Class<?> type) {
-      ModuleAdapter<?> result =
-          instantiate(type.getName().concat(MODULE_ADAPTER_SUFFIX), type.getClassLoader());
-      if (result == null) {
-        throw new IllegalStateException("Module adapter for " + type + " could not be loaded. "
-            + "Please ensure that code generation was run for this module.");
-      }
-      return result;
-    }
-  };
+  private final Memoizer<Class<?>, ModuleAdapter<?>> loadedAdapters =
+      new Memoizer<Class<?>, ModuleAdapter<?>>() {
+        @Override protected ModuleAdapter<?> create(Class<?> type) {
+          ModuleAdapter<?> result =
+              instantiate(type.getName().concat(MODULE_ADAPTER_SUFFIX), type.getClassLoader());
+          if (result == null) {
+            throw new IllegalStateException("Module adapter for " + type + " could not be loaded. "
+                + "Please ensure that code generation was run for this module.");
+          }
+          return result;
+        }
+      };
 
   /**
    * Obtains a module adapter for {@code module} from the first responding resolver.
/Fim/
diff --git a/core/src/main/java/dagger/internal/Keys.java b/core/src/main/java/dagger/internal/Keys.java
index da7eeb2..53a4d7a 100644
--- a/core/src/main/java/dagger/internal/Keys.java
+++ b/core/src/main/java/dagger/internal/Keys.java
@@ -46,12 +46,12 @@
   private static final String LAZY_PREFIX = Lazy.class.getCanonicalName() + "<";
   private static final String SET_PREFIX = Set.class.getCanonicalName() + "<";
 
-  private static final LruCache<Class<? extends Annotation>, Boolean> IS_QUALIFIER_ANNOTATION
-      = new LruCache<Class<? extends Annotation>, Boolean>(Integer.MAX_VALUE) {
-    @Override protected Boolean create(Class<? extends Annotation> annotationType) {
-      return annotationType.isAnnotationPresent(Qualifier.class);
-    }
-  };
+  private static final Memoizer<Class<? extends Annotation>, Boolean> IS_QUALIFIER_ANNOTATION =
+      new Memoizer<Class<? extends Annotation>, Boolean>() {
+        @Override protected Boolean create(Class<? extends Annotation> annotationType) {
+          return annotationType.isAnnotationPresent(Qualifier.class);
+        }
+      };
 
   Keys() {
   }
/Fim/
diff --git a/core/src/main/java/dagger/internal/Loader.java b/core/src/main/java/dagger/internal/Loader.java
index c367a53..ed81ede 100644
--- a/core/src/main/java/dagger/internal/Loader.java
+++ b/core/src/main/java/dagger/internal/Loader.java
@@ -25,21 +25,20 @@
  * provide all resolution methods
  */
 public abstract class Loader {
-
-  private final LruCache<ClassLoader, LruCache<String, Class<?>>> caches =
-      new LruCache<ClassLoader, LruCache<String, Class<?>>>(Integer.MAX_VALUE) {
-    @Override protected LruCache<String, Class<?>> create(final ClassLoader classLoader) {
-      return new LruCache<String, Class<?>>(Integer.MAX_VALUE) {
-        @Override protected Class<?> create(String className) {
-          try {
-            return classLoader.loadClass(className);
-          } catch (ClassNotFoundException e) {
-            return Void.class; // Cache the failure (negative case).
-          }
+  private final Memoizer<ClassLoader, Memoizer<String, Class<?>>> caches =
+      new Memoizer<ClassLoader, Memoizer<String, Class<?>>>() {
+        @Override protected Memoizer<String, Class<?>> create(final ClassLoader classLoader) {
+          return new Memoizer<String, Class<?>>() {
+            @Override protected Class<?> create(String className) {
+              try {
+                return classLoader.loadClass(className);
+              } catch (ClassNotFoundException e) {
+                return Void.class; // Cache the failure (negative case).
+              }
+            }
+          };
         }
       };
-    }
-  };
 
   /**
    * Returns a binding that uses {@code @Inject} annotations, or null if no valid binding can
/Fim/
/Fim/
diff --git a/core/src/main/java/dagger/internal/Memoizer.java b/core/src/main/java/dagger/internal/Memoizer.java
new file mode 100644
index 0000000..300cb9a
--- /dev/null
+++ b/core/src/main/java/dagger/internal/Memoizer.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.internal;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+/**
+ * Represents an operation to be
+ */
+abstract class Memoizer<K, V> {
+  private final Map<K, V> map;
+  private final Lock readLock;
+  private final Lock writeLock;
+
+  public Memoizer() {
+    this.map = new HashMap<K, V>();
+    ReadWriteLock lock = new ReentrantReadWriteLock();
+    this.readLock = lock.readLock();
+    this.writeLock = lock.writeLock();
+  }
+
+  public final V get(K key) {
+    if (key == null) {
+      throw new NullPointerException("key == null");
+    }
+
+    // check to see if we already have a value
+    readLock.lock();
+    try {
+      V value = map.get(key);
+      if (value != null) {
+        return value;
+      }
+    } finally {
+      readLock.unlock();
+    }
+
+    // create a new value.  this may race and we might create more than one instance, but that's ok
+    V newValue = create(key);
+    if (newValue == null) {
+      throw new NullPointerException("create returned null");
+    }
+
+    // write the new value and return it
+    writeLock.lock();
+    try {
+      map.put(key, newValue);
+      return newValue;
+    } finally {
+      writeLock.unlock();
+    }
+  }
+
+  protected abstract V create(K key);
+
+  @Override public synchronized final String toString() {
+    readLock.lock();
+    try {
+      return map.toString();
+    } finally {
+      readLock.unlock();
+    }
+  }
+}
\ No newline at end of file
/Fim/
