diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestHeaders.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestHeaders.java
index 6931153..d512052 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestHeaders.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestHeaders.java
@@ -291,12 +291,30 @@
     return ifModifiedSince != null || ifNoneMatch != null;
   }
 
-  public void addCookies(Map<String, List<String>> allCookieHeaders) {
-    for (Map.Entry<String, List<String>> entry : allCookieHeaders.entrySet()) {
-      String key = entry.getKey();
-      if ("Cookie".equalsIgnoreCase(key) || "Cookie2".equalsIgnoreCase(key)) {
-        headers.addAll(key, entry.getValue());
-      }
+    public void addCookies(Map<String, List<String>> allCookieHeaders) {
+        for (Map.Entry<String, List<String>> entry : allCookieHeaders.entrySet()) {
+            String key = entry.getKey();
+            if ("Cookie".equalsIgnoreCase(key) || "Cookie2".equalsIgnoreCase(key)) {
+                if (!entry.getValue().isEmpty()) {
+                    headers.add(key, buildCookieHeader(entry.getValue()));
+                }
+            }
+        }
     }
-  }
+
+    // format has defined here:  http://tools.ietf.org/html/rfc6265#section-4.2.1
+    private String buildCookieHeader(List<String> cookies) {
+        StringBuilder sb = new StringBuilder();
+        boolean isFirst = true;
+        for (String cookie : cookies) {
+            if (isFirst) {
+                isFirst = false;
+            } else {
+                sb.append(';');
+            }
+            sb.append(cookie);
+        }
+        return sb.toString();
+    }
+
 }
/Fim/
