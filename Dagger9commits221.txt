diff --git a/core/src/main/java/com/squareup/objectgraph/internal/codegen/ProvidesProcessor.java b/core/src/main/java/com/squareup/objectgraph/internal/codegen/ProvidesProcessor.java
index db88bc3..83d0586 100644
--- a/core/src/main/java/com/squareup/objectgraph/internal/codegen/ProvidesProcessor.java
+++ b/core/src/main/java/com/squareup/objectgraph/internal/codegen/ProvidesProcessor.java
@@ -94,6 +94,7 @@
           || typeModifiers.contains(Modifier.ABSTRACT)) {
         error("Classes declaring @Provides methods must not be private or abstract: "
                 + type.getQualifiedName());
+        continue;
       }
 
       Set<Modifier> methodModifiers = providerMethod.getModifiers();
/Fim/
diff --git a/core/src/main/java/com/squareup/objectgraph/Lazy.java b/core/src/main/java/com/squareup/objectgraph/Lazy.java
new file mode 100644
index 0000000..ac61f60
--- /dev/null
+++ b/core/src/main/java/com/squareup/objectgraph/Lazy.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2012 Google, Inc.
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.squareup.objectgraph;
+
+/**
+ * A value that is lazily returned. A {@code Lazy<T>} creates or obtains its underlying
+ * value once, and caches that value thereafter.
+ * <p>
+ * Despite the similarity of these interfaces, {@code Lazy<T>} is semantically quite
+ * distinct from {@code Provider<T>} which provides a new value on each call.
+ */
+public interface Lazy<T> {
+  /**
+   * Return the underlying value, creating the value (once) if needed. Any two calls will
+   * return the same instance.
+   */
+  T get();
+}
/Fim/
diff --git a/core/src/main/java/com/squareup/objectgraph/internal/Keys.java b/core/src/main/java/com/squareup/objectgraph/internal/Keys.java
index e92c3b7..1853033 100644
--- a/core/src/main/java/com/squareup/objectgraph/internal/Keys.java
+++ b/core/src/main/java/com/squareup/objectgraph/internal/Keys.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2012 Square, Inc.
+ * Copyright (C) 2012 Google, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +16,7 @@
  */
 package com.squareup.objectgraph.internal;
 
+import com.squareup.objectgraph.Lazy;
 import com.squareup.objectgraph.MembersInjector;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.GenericArrayType;
@@ -39,6 +41,7 @@
 public final class Keys {
   private static final String PROVIDER_PREFIX = Provider.class.getName() + "<";
   private static final String MEMBERS_INJECTOR_PREFIX = MembersInjector.class.getName() + "<";
+  private static final String LAZY_PREFIX = Lazy.class.getName() + "<";
 
   private static final LruCache<Class<? extends Annotation>, Boolean> IS_QUALIFIER_ANNOTATION
       = new LruCache<Class<? extends Annotation>, Boolean>(Integer.MAX_VALUE) {
@@ -138,25 +141,55 @@
    * key for {@code Foo}. This retains annotations and supports both Provider
    * keys and MembersInjector keys.
    */
-  public static String getDelegateKey(String key) {
-    int start = 0;
-    if (key.startsWith("@")) {
-      start = key.lastIndexOf('/') + 1;
-    }
-
-    String delegatePrefix;
-    String wrapperPrefix;
+  static String getBuiltInBindingsKey(String key) {
+    int start = startOfType(key);
     if (substringStartsWith(key, start, PROVIDER_PREFIX)) {
-      delegatePrefix = key.substring(0, start);
-      wrapperPrefix = PROVIDER_PREFIX;
+      return extractKey(key, start, key.substring(0, start), PROVIDER_PREFIX);
     } else if (substringStartsWith(key, start, MEMBERS_INJECTOR_PREFIX)) {
-      delegatePrefix = "members/";
-      wrapperPrefix = MEMBERS_INJECTOR_PREFIX;
+      return extractKey(key, start, "members/", MEMBERS_INJECTOR_PREFIX);
     } else {
       return null;
     }
-    return delegatePrefix
-        + key.substring(start + wrapperPrefix.length(), key.length() - 1);
+  }
+
+  /**
+   * Returns a key for the underlying binding of a Lazy<T> value. For example,
+   * if this is a key for a {@code Lazy<Foo>}, this returns the key for
+   * {@code Foo}. This retains annotations.
+   */
+  static String getLazyKey(String key) {
+    int start = startOfType(key);
+    if (substringStartsWith(key, start, LAZY_PREFIX)) {
+      return extractKey(key, start, key.substring(0, start), LAZY_PREFIX);
+    } else {
+      return null;
+    }
+  }
+
+  /**
+   * Returns the start of a key if it is a plain key, and the start of the
+   * underlying key if it is an annotated key
+   */
+  private static int startOfType(String key) {
+    return (key.startsWith("@")) ? key.lastIndexOf('/') + 1 : 0;
+  }
+
+  /**
+   * Returns an unwrapped key (the key for T from a Provider<T> for example),
+   * removing all wrapping key information, but preserving annotations or known
+   * prefixes.
+   *
+   * @param key the key from which the delegate key should be extracted.
+   * @param start
+   *          an index into the key representing the key's "real" start after
+   *          any annotations.
+   * @param delegatePrefix
+   *          key prefix elements extracted from the underlying delegate
+   *          (annotations, "members/", etc.)
+   * @param prefix the prefix to strip.
+   */
+  private static String extractKey(String key, int start, String delegatePrefix, String prefix) {
+    return delegatePrefix + key.substring(start + prefix.length(), key.length() - 1);
   }
 
   /** Returns true if {@code string.substring(offset).startsWith(substring)}. */
@@ -206,4 +239,5 @@
     if (type == void.class) return Void.class;
     return type;
   }
+
 }
/Fim/
diff --git a/core/src/main/java/com/squareup/objectgraph/internal/LazyBinding.java b/core/src/main/java/com/squareup/objectgraph/internal/LazyBinding.java
new file mode 100644
index 0000000..369031b
--- /dev/null
+++ b/core/src/main/java/com/squareup/objectgraph/internal/LazyBinding.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2012 Google, Inc.
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.squareup.objectgraph.internal;
+
+import com.squareup.objectgraph.Lazy;
+
+/**
+ * Injects a Lazy wrapper for a type T
+ */
+final class LazyBinding<T> extends Binding<Lazy<T>> {
+
+  private final static Object NOT_PRESENT = new Object();
+
+  private final String lazyKey;
+  private Binding<T> delegate;
+
+  public LazyBinding(String key, Object requiredBy, String lazyKey) {
+    super(key, null, false, requiredBy);
+    this.lazyKey = lazyKey;
+  }
+
+  @SuppressWarnings("unchecked") // At runtime we know it's a Binding<Lazy<T>>.
+  @Override
+  public void attach(Linker linker) {
+    delegate = (Binding<T>) linker.requestBinding(lazyKey, requiredBy);
+  }
+
+  @Override public void injectMembers(Lazy<T> t) {
+    throw new UnsupportedOperationException(); // not a member injection binding.
+  }
+
+  @Override
+  public Lazy<T> get() {
+    return new Lazy<T>() {
+      private Object cacheValue = NOT_PRESENT;
+
+      @SuppressWarnings("unchecked") // Delegate is of type T
+      @Override
+      public T get() {
+        return (T) ((cacheValue != NOT_PRESENT) ? cacheValue : (cacheValue = delegate.get()));
+      }
+    };
+  }
+
+}
/Fim/
diff --git a/core/src/main/java/com/squareup/objectgraph/internal/Linker.java b/core/src/main/java/com/squareup/objectgraph/internal/Linker.java
index 0bd631c..c29e6c4 100644
--- a/core/src/main/java/com/squareup/objectgraph/internal/Linker.java
+++ b/core/src/main/java/com/squareup/objectgraph/internal/Linker.java
@@ -117,20 +117,23 @@
   }
 
   /**
-   * Creates a just-in-time binding for the key in {@code deferred}. The type of
-   * binding to be created depends on the key's type:
+   * Creates a just-in-time binding for the key in {@code deferred}. The type of binding
+   * to be created depends on the key's type:
    * <ul>
-   *   <li>Injections of {@code Provider<Foo>} and {@code MembersInjector<Bar>}
-   *       will delegate to the bindings of {@code Foo} and {@code Bar}
-   *       respectively.
-   *   <li>Injections of other types will use the injectable constructors of
-   *       those classes.
+   *   <li>Injections of {@code Provider<Foo>}, {@code MembersInjector<Bar>}, and
+   *       {@code Lazy<Blah>} will delegate to the bindings of {@code Foo}, {@code Bar}, and
+   *       {@code Blah} respectively.
+   *   <li>Injections of other types will use the injectable constructors of those classes.
    * </ul>
    */
   private Binding<?> createJitBinding(String key, Object requiredBy) throws ClassNotFoundException {
-    String delegateKey = Keys.getDelegateKey(key);
-    if (delegateKey != null) {
-      return new BuiltInBinding<Object>(key, requiredBy, delegateKey);
+    String builtInBindingsKey = Keys.getBuiltInBindingsKey(key);
+    if (builtInBindingsKey != null) {
+      return new BuiltInBinding<Object>(key, requiredBy, builtInBindingsKey);
+    }
+    String lazyKey = Keys.getLazyKey(key);
+    if (lazyKey != null) {
+      return new LazyBinding<Object>(key, requiredBy, lazyKey);
     }
 
     String className = Keys.getClassName(key);
/Fim/
diff --git a/core/src/test/java/com/squareup/objectgraph/InjectionOfLazyTest.java b/core/src/test/java/com/squareup/objectgraph/InjectionOfLazyTest.java
new file mode 100644
index 0000000..be06173
--- /dev/null
+++ b/core/src/test/java/com/squareup/objectgraph/InjectionOfLazyTest.java
@@ -0,0 +1,133 @@
+/*
+ * Copyright (C) 2012 Google Inc.
+ * Copyright (C) 2012 Square Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.squareup.objectgraph;
+
+import java.util.concurrent.atomic.AtomicInteger;
+import javax.inject.Inject;
+import javax.inject.Provider;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+/**
+ * Tests of injection of Lazy<T> bindings.
+ */
+public final class InjectionOfLazyTest {
+  @Test public void lazyValueCreation() {
+    final AtomicInteger counter = new AtomicInteger();
+    class TestEntryPoint {
+      @Inject Lazy<Integer> i;
+      @Inject Lazy<Integer> j;
+    }
+
+    @Module(entryPoints = TestEntryPoint.class)
+    class TestModule {
+      @Provides Integer provideInteger() {
+        return counter.incrementAndGet();
+      }
+    }
+
+    TestEntryPoint ep = injectWithModule(new TestEntryPoint(), new TestModule());
+    assertEquals(0, counter.get());
+    assertEquals(1, ep.i.get().intValue());
+    assertEquals(1, counter.get());
+    assertEquals(2, ep.j.get().intValue());
+    assertEquals(1, ep.i.get().intValue());
+    assertEquals(2, counter.get());
+  }
+
+  @Test public void lazyNullCreation() {
+    final AtomicInteger provideCounter = new AtomicInteger(0);
+    class TestEntryPoint {
+      @Inject Lazy<String> i;
+    }
+    @Module(entryPoints = TestEntryPoint.class)
+    class TestModule {
+      @Provides String provideInteger() {
+        provideCounter.incrementAndGet();
+        return null;
+      }
+    }
+
+    TestEntryPoint ep = injectWithModule(new TestEntryPoint(), new TestModule());
+    assertEquals(0, provideCounter.get());
+    assertNull(ep.i.get());
+    assertEquals(1, provideCounter.get());
+    assertNull(ep.i.get()); // still null
+    assertEquals(1, provideCounter.get()); // still only called once.
+  }
+
+  @Test public void providerOfLazyOfSomething() {
+    final AtomicInteger counter = new AtomicInteger();
+    class TestEntryPoint {
+      @Inject Provider<Lazy<Integer>> providerOfLazyInteger;
+    }
+
+    @Module(entryPoints = TestEntryPoint.class)
+    class TestModule {
+      @Provides Integer provideInteger() {
+        return counter.incrementAndGet();
+      }
+    }
+
+    TestEntryPoint ep = injectWithModule(new TestEntryPoint(), new TestModule());
+    assertEquals(0, counter.get());
+    Lazy<Integer> i = ep.providerOfLazyInteger.get();
+    assertEquals(1, i.get().intValue());
+    assertEquals(1, counter.get());
+    assertEquals(1, i.get().intValue());
+    Lazy<Integer> j = ep.providerOfLazyInteger.get();
+    assertEquals(2, j.get().intValue());
+    assertEquals(2, counter.get());
+    assertEquals(1, i.get().intValue());
+  }
+
+  @Test public void sideBySideLazyVsProvider() {
+    final AtomicInteger counter = new AtomicInteger();
+    class TestEntryPoint {
+      @Inject Provider<Integer> providerOfInteger;
+      @Inject Lazy<Integer> lazyInteger;
+    }
+
+    @Module(entryPoints = TestEntryPoint.class)
+    class TestModule {
+      @Provides Integer provideInteger() {
+        return counter.incrementAndGet();
+      }
+    }
+
+    TestEntryPoint ep = injectWithModule(new TestEntryPoint(), new TestModule());
+    assertEquals(0, counter.get());
+    assertEquals(0, counter.get());
+    assertEquals(1, ep.lazyInteger.get().intValue());
+    assertEquals(1, counter.get());
+    assertEquals(2, ep.providerOfInteger.get().intValue()); // fresh instance
+    assertEquals(1, ep.lazyInteger.get().intValue()); // still the same instance
+    assertEquals(2, counter.get());
+    assertEquals(3, ep.providerOfInteger.get().intValue()); // fresh instance
+    assertEquals(1, ep.lazyInteger.get().intValue()); // still the same instance.
+  }
+
+  private <T> T injectWithModule(T ep, Object ... modules) {
+    // TODO(cgruber): Make og.inject(foo) return foo properly.
+    ObjectGraph og = ObjectGraph.get(modules);
+    og.inject(ep);
+    return ep;
+  }
+
+}
/Fim/
diff --git a/core/src/test/java/com/squareup/objectgraph/internal/KeysTest.java b/core/src/test/java/com/squareup/objectgraph/internal/KeysTest.java
index bb5e2ab..b2425be 100644
--- a/core/src/test/java/com/squareup/objectgraph/internal/KeysTest.java
+++ b/core/src/test/java/com/squareup/objectgraph/internal/KeysTest.java
@@ -15,6 +15,7 @@
  */
 package com.squareup.objectgraph.internal;
 
+import com.squareup.objectgraph.Lazy;
 import com.squareup.objectgraph.MembersInjector;
 import java.lang.reflect.Field;
 import java.util.List;
@@ -89,24 +90,41 @@
   Provider<String> providerOfType;
   String providedType;
   @Test public void testGetDelegateKey() throws NoSuchFieldException {
-    assertThat(Keys.getDelegateKey(fieldKey("providerOfType")))
+    assertThat(Keys.getBuiltInBindingsKey(fieldKey("providerOfType")))
         .isEqualTo(fieldKey("providedType"));
   }
 
   @Named("/@") Provider<String> providerOfTypeAnnotated;
   @Named("/@") String providedTypeAnnotated;
   @Test public void testGetDelegateKeyWithAnnotation() throws NoSuchFieldException {
-    assertThat(Keys.getDelegateKey(fieldKey("providerOfTypeAnnotated")))
+    assertThat(Keys.getBuiltInBindingsKey(fieldKey("providerOfTypeAnnotated")))
         .isEqualTo(fieldKey("providedTypeAnnotated"));
   }
 
   @Named("/@") MembersInjector<String> membersInjectorOfType;
   @Named("/@") String injectedType;
   @Test public void testGetDelegateKeyWithMembersInjector() throws NoSuchFieldException {
-    assertThat(Keys.getDelegateKey(fieldKey("membersInjectorOfType")))
+    assertThat(Keys.getBuiltInBindingsKey(fieldKey("membersInjectorOfType")))
         .isEqualTo("members/java.lang.String");
   }
 
+  @Named("/@") Lazy<String> lazyAnnotatedString;
+  @Named("/@") String eagerAnnotatedString;
+  @Test public void testAnnotatedGetLazyKey() throws NoSuchFieldException {
+    assertThat(Keys.getLazyKey(fieldKey("lazyAnnotatedString")))
+        .isEqualTo(fieldKey("eagerAnnotatedString"));
+  }
+
+  Lazy<String> lazyString;
+  String eagerString;
+  @Test public void testGetLazyKey() throws NoSuchFieldException {
+    assertThat(Keys.getLazyKey(fieldKey("lazyString"))).isEqualTo(fieldKey("eagerString"));
+  }
+
+  @Test public void testGetLazyKey_WrongKeyType() throws NoSuchFieldException {
+    assertThat(Keys.getLazyKey(fieldKey("providerOfTypeAnnotated"))).isNull();
+  }
+
   private String fieldKey(String fieldName) throws NoSuchFieldException {
     Field field = KeysTest.class.getDeclaredField(fieldName);
     return Keys.get(field.getGenericType(), field.getAnnotations(), field);
/Fim/
diff --git a/core/src/main/java/com/squareup/objectgraph/Module.java b/core/src/main/java/com/squareup/objectgraph/Module.java
index 842d555..989de64 100644
--- a/core/src/main/java/com/squareup/objectgraph/Module.java
+++ b/core/src/main/java/com/squareup/objectgraph/Module.java
@@ -38,13 +38,20 @@
   boolean overrides() default false;
 
   /**
-   * Additional {@code @Module}-annotated classes that this module is composed
-   * of. The contributions of the modules in {@code children}, and of their
-   * children recursively, are all contributed to the object graph.
+   * @deprecated Use module includes vs. children
    */
+  @Deprecated
   Class<?>[] children() default { };
 
   /**
+   * Additional {@code @Module}-annotated classes from which this module is
+   * composed. The de-duplicated contributions of the modules in
+   * {@code includes}, and of their inclusions recursively, are all contributed
+   * to the object graph.
+   */
+  Class<?>[] includes() default { };
+
+  /**
    * True if all of the bindings required by this module can also be satisfied
    * by this module. If a module is complete it is eligible for additional
    * static checking: tools can detect if required bindings are not available.
/Fim/
diff --git a/core/src/main/java/com/squareup/objectgraph/ObjectGraph.java b/core/src/main/java/com/squareup/objectgraph/ObjectGraph.java
index 669544c..cbf331e 100644
--- a/core/src/main/java/com/squareup/objectgraph/ObjectGraph.java
+++ b/core/src/main/java/com/squareup/objectgraph/ObjectGraph.java
@@ -122,7 +122,7 @@
   }
 
   /**
-   * Returns a full set of module adapters, including module adapters for child
+   * Returns a full set of module adapters, including module adapters for included
    * modules.
    */
   private static ModuleAdapter<?>[] getAllModuleAdapters(Object[] seedModules) {
@@ -145,7 +145,7 @@
     // Next add adapters for the modules that we need to construct. This creates
     // instances of modules as necessary.
     for (ModuleAdapter<?> adapter : seedAdapters) {
-      collectChildModulesRecursively(adapter, adaptersByModuleType);
+      collectIncludedModulesRecursively(adapter, adaptersByModuleType);
     }
 
     return adaptersByModuleType.values().toArray(
@@ -153,16 +153,16 @@
   }
 
   /**
-   * Fills {@code result} with the module adapters for the children of {@code
-   * adapter}, and their children recursively.
+   * Fills {@code result} with the module adapters for the includes of {@code
+   * adapter}, and their includes recursively.
    */
-  private static void collectChildModulesRecursively(ModuleAdapter<?> adapter,
+  private static void collectIncludedModulesRecursively(ModuleAdapter<?> adapter,
       Map<Class<?>, ModuleAdapter<?>> result) {
-    for (Class<?> child : adapter.children) {
-      if (!result.containsKey(child)) {
-        ModuleAdapter<Object> childAdapter = ModuleAdapter.get(child, null);
-        result.put(child, childAdapter);
-        collectChildModulesRecursively(childAdapter, result);
+    for (Class<?> include : adapter.includes) {
+      if (!result.containsKey(include)) {
+        ModuleAdapter<Object> includedModuleAdapter = ModuleAdapter.get(include, null);
+        result.put(include, includedModuleAdapter);
+        collectIncludedModulesRecursively(includedModuleAdapter, result);
       }
     }
   }
/Fim/
diff --git a/core/src/main/java/com/squareup/objectgraph/internal/ModuleAdapter.java b/core/src/main/java/com/squareup/objectgraph/internal/ModuleAdapter.java
index d44bfef..11b1f37 100644
--- a/core/src/main/java/com/squareup/objectgraph/internal/ModuleAdapter.java
+++ b/core/src/main/java/com/squareup/objectgraph/internal/ModuleAdapter.java
@@ -33,16 +33,16 @@
   public final String[] entryPoints;
   public final Class<?>[] staticInjections;
   public final boolean overrides;
-  public final Class<?>[] children;
+  public final Class<?>[] includes;
   public final boolean complete;
   protected T module;
 
   protected ModuleAdapter(String[] entryPoints, Class<?>[] staticInjections, boolean overrides,
-      Class<?>[] children, boolean complete) {
+      Class<?>[] includes, boolean complete) {
     this.entryPoints = entryPoints;
     this.staticInjections = staticInjections;
     this.overrides = overrides;
-    this.children = children;
+    this.includes = includes;
     this.complete = complete;
   }
 
@@ -91,12 +91,32 @@
   static class ReflectiveModuleAdapter extends ModuleAdapter<Object> {
     final Class<?> moduleClass;
 
+    @SuppressWarnings("deprecation") // explicitly handles deprecated case
     ReflectiveModuleAdapter(Class<?> moduleClass, Module annotation) {
-      super(toMemberKeys(annotation.entryPoints()), annotation.staticInjections(),
-          annotation.overrides(), annotation.children(), annotation.complete());
+      super(toMemberKeys(
+          annotation.entryPoints()),
+          annotation.staticInjections(),
+          annotation.overrides(),
+          concatenate(annotation.includes(), annotation.children()),
+          annotation.complete());
       this.moduleClass = moduleClass;
     }
 
+    /**
+     * Returns the concatenation of two {@code Class<T>[]}s.
+     *
+     * TODO(cgruber): Remove this method when module children are removed.
+     *
+     * @deprecated this method exists only to support a legacy deprecation case
+     */
+    @Deprecated
+    private static Class<?>[] concatenate(Class<?>[] first, Class<?>[] second) {
+      final Class<?>[] result = new Class<?>[second.length + first.length];
+      System.arraycopy(second, 0, result, 0, second.length);
+      System.arraycopy(first, 0, result, second.length, first.length);
+      return result;
+    }
+
     private static String[] toMemberKeys(Class<?>[] entryPoints) {
       String[] result = new String[entryPoints.length];
       for (int i = 0; i < entryPoints.length; i++) {
@@ -125,9 +145,9 @@
 
     @Override protected Object newModule() {
       try {
-        Constructor<?> childConstructor = moduleClass.getDeclaredConstructor();
-        childConstructor.setAccessible(true);
-        return childConstructor.newInstance();
+        Constructor<?> includeConstructor = moduleClass.getDeclaredConstructor();
+        includeConstructor.setAccessible(true);
+        return includeConstructor.newInstance();
       } catch (Exception e) {
         throw new IllegalArgumentException("Unable to instantiate " + moduleClass.getName(), e);
       }
/Fim/
diff --git a/core/src/main/java/com/squareup/objectgraph/internal/codegen/ArrayUtil.java b/core/src/main/java/com/squareup/objectgraph/internal/codegen/ArrayUtil.java
new file mode 100644
index 0000000..4294d76
--- /dev/null
+++ b/core/src/main/java/com/squareup/objectgraph/internal/codegen/ArrayUtil.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2012 Google, Inc.
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.squareup.objectgraph.internal.codegen;
+
+
+/**
+ * A utility to provide Array utilities above and beyond what are provided in the
+ * java.util.Arrays class.
+ */
+class ArrayUtil {
+  /**
+   * A class that returns the concatenation of two {@code Class<T>[]}s.
+   *
+   * TODO(cgruber): Remove this method when module children are removed if no other callers.
+   *
+   * @deprecated this method exists only to support a legacy deprecation case
+   */
+  @Deprecated
+  static Object[] concatenate(Object[] first, Object[] second) {
+    final Object[] result = new Object[second.length + first.length];
+    System.arraycopy(second, 0, result, 0, second.length);
+    System.arraycopy(first, 0, result, second.length, first.length);
+    return result;
+  }
+}
/Fim/
diff --git a/core/src/main/java/com/squareup/objectgraph/internal/codegen/FullGraphProcessor.java b/core/src/main/java/com/squareup/objectgraph/internal/codegen/FullGraphProcessor.java
index 3230563..1ecd70f 100644
--- a/core/src/main/java/com/squareup/objectgraph/internal/codegen/FullGraphProcessor.java
+++ b/core/src/main/java/com/squareup/objectgraph/internal/codegen/FullGraphProcessor.java
@@ -58,7 +58,7 @@
 
   private void validateComplete(TypeElement rootModule) {
     Map<String, TypeElement> allModules = new LinkedHashMap<String, TypeElement>();
-    collectChildModulesRecursively(rootModule, allModules);
+    collectIncludesRecursively(rootModule, allModules);
 
     Linker linker = new BuildTimeLinker(processingEnv, rootModule.getQualifiedName().toString());
     Map<String, ProviderMethodBinding> baseBindings
@@ -110,21 +110,25 @@
         + "." + method.getSimpleName() + "()";
   }
 
-  private void collectChildModulesRecursively(TypeElement module, Map<String, TypeElement> result) {
+  private void collectIncludesRecursively(TypeElement module, Map<String, TypeElement> result) {
     // Add the module.
     result.put(module.getQualifiedName().toString(), module);
 
-    // Recurse for each child module.
+    // Recurse for each included module.
     Types typeUtils = processingEnv.getTypeUtils();
     Map<String, Object> annotation = CodeGen.getAnnotation(Module.class, module);
-    for (Object child : (Object[]) annotation.get("children")) {
-      if (!(child instanceof TypeMirror)) {
+    @SuppressWarnings("deprecation") // Use known deprecated method. TODO(cgruber): remove.
+    Object[] includes = ArrayUtil.concatenate(
+        (Object[]) annotation.get("includes"),
+        (Object[]) annotation.get("children"));
+    for (Object include : includes) {
+      if (!(include instanceof TypeMirror)) {
         processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING,
-            "Unexpected value for child: " + child + " in " + module);
+            "Unexpected value for include: " + include + " in " + module);
         continue;
       }
-      TypeElement childModule = (TypeElement) typeUtils.asElement((TypeMirror) child);
-      collectChildModulesRecursively(childModule, result);
+      TypeElement includedModule = (TypeElement) typeUtils.asElement((TypeMirror) include);
+      collectIncludesRecursively(includedModule, result);
     }
   }
 
/Fim/
diff --git a/core/src/main/java/com/squareup/objectgraph/internal/codegen/ProvidesProcessor.java b/core/src/main/java/com/squareup/objectgraph/internal/codegen/ProvidesProcessor.java
index 83d0586..79dc5c1 100644
--- a/core/src/main/java/com/squareup/objectgraph/internal/codegen/ProvidesProcessor.java
+++ b/core/src/main/java/com/squareup/objectgraph/internal/codegen/ProvidesProcessor.java
@@ -137,7 +137,11 @@
 
     Object[] staticInjections = (Object[]) module.get("staticInjections");
     Object[] entryPoints = (Object[]) module.get("entryPoints");
-    Object[] children = (Object[]) module.get("children");
+    @SuppressWarnings("deprecation") // use deprecated until children removed.
+    Object[] includes = ArrayUtil.concatenate(
+        (Object[]) module.get("includes"),
+        (Object[]) module.get("children"));
+
     boolean overrides = (Boolean) module.get("overrides");
     boolean complete = (Boolean) module.get("complete");
 
@@ -175,22 +179,22 @@
     writer.field("Class<?>[]", "STATIC_INJECTIONS", PRIVATE | STATIC | FINAL,
         staticInjectionsField.toString());
 
-    StringBuilder childrenField = new StringBuilder().append("{ ");
-    for (Object child : children) {
-      if (!(child instanceof TypeMirror)) {
+    StringBuilder includesField = new StringBuilder().append("{ ");
+    for (Object include : includes) {
+      if (!(include instanceof TypeMirror)) {
         processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING,
-            "Unexpected value: " + child + " in children attribute of " + type);
+            "Unexpected value: " + include + " in includes or children attribute of " + type);
         continue;
       }
-      TypeMirror typeMirror = (TypeMirror) child;
-      childrenField.append(CodeGen.typeToString(typeMirror)).append(".class, ");
+      TypeMirror typeMirror = (TypeMirror) include;
+      includesField.append(CodeGen.typeToString(typeMirror)).append(".class, ");
     }
-    childrenField.append("}");
-    writer.field("Class<?>[]", "CHILDREN", PRIVATE | STATIC | FINAL, childrenField.toString());
+    includesField.append("}");
+    writer.field("Class<?>[]", "INCLUDES", PRIVATE | STATIC | FINAL, includesField.toString());
 
     writer.beginMethod(null, adapterName, PUBLIC);
     writer.statement("super(ENTRY_POINTS, STATIC_INJECTIONS, %s /*overrides*/, "
-        + "CHILDREN, %s /*complete*/)", overrides, complete);
+        + "INCLUDES, %s /*complete*/)", overrides, complete);
     writer.endMethod();
 
     writer.annotation(Override.class);
/Fim/
diff --git a/core/src/test/java/com/squareup/objectgraph/ChildModuleTest.java b/core/src/test/java/com/squareup/objectgraph/ModuleIncludesTest.java
similarity index 70%
rename from core/src/test/java/com/squareup/objectgraph/ChildModuleTest.java
rename to core/src/test/java/com/squareup/objectgraph/ModuleIncludesTest.java
index 8f655f3..0a06614 100644
--- a/core/src/test/java/com/squareup/objectgraph/ChildModuleTest.java
+++ b/core/src/test/java/com/squareup/objectgraph/ModuleIncludesTest.java
@@ -22,7 +22,7 @@
 import static org.junit.Assert.fail;
 
 @SuppressWarnings("unused")
-public final class ChildModuleTest {
+public final class ModuleIncludesTest {
   static class TestEntryPoint {
     @Inject String s;
   }
@@ -32,7 +32,7 @@
   }
 
   @Test public void childModuleWithEntryPoint() {
-    @Module(children = ModuleWithEntryPoint.class)
+    @Module(includes = ModuleWithEntryPoint.class)
     class TestModule {
       @Provides String provideString() {
         return "injected";
@@ -54,7 +54,7 @@
   }
 
   @Test public void childModuleWithStaticInjection() {
-    @Module(children = ModuleWithStaticInjection.class)
+    @Module(includes = ModuleWithStaticInjection.class)
     class TestModule {
       @Provides String provideString() {
         return "injected";
@@ -81,7 +81,7 @@
 
     @Module(
         entryPoints = TestEntryPoint.class,
-        children = ModuleWithBinding.class
+        includes = ModuleWithBinding.class
     )
     class TestModule {
     }
@@ -92,7 +92,7 @@
     assertThat(entryPoint.s).isEqualTo("injected");
   }
 
-  @Module(children = ModuleWithBinding.class)
+  @Module(includes = ModuleWithBinding.class)
   static class ModuleWithChildModule {
   }
 
@@ -103,7 +103,7 @@
 
     @Module(
         entryPoints = TestEntryPoint.class,
-        children = ModuleWithChildModule.class
+        includes = ModuleWithChildModule.class
     )
     class TestModule {
     }
@@ -128,7 +128,7 @@
   }
 
   @Test public void childModuleMissingManualConstruction() {
-    @Module(children = ModuleWithConstructor.class)
+    @Module(includes = ModuleWithConstructor.class)
     class TestModule {
     }
 
@@ -146,7 +146,7 @@
 
     @Module(
         entryPoints = TestEntryPoint.class,
-        children = ModuleWithConstructor.class
+        includes = ModuleWithConstructor.class
     )
     class TestModule {
     }
@@ -156,4 +156,48 @@
     objectGraph.inject(entryPoint);
     assertThat(entryPoint.s).isEqualTo("a");
   }
+
+  // Legacy Tests //
+
+  @Test public void childrenButNoIncludes() {
+    class TestEntryPoint {
+      @Inject String s;
+    }
+    @Module(entryPoints = TestEntryPoint.class, children = ModuleWithBinding.class)
+    class TestModule {
+    }
+
+    TestEntryPoint ep = injectWithModule(new TestEntryPoint(), new TestModule());
+    assertThat(ep.s).isEqualTo("injected");
+  }
+
+  @Module(complete = false)
+  static class ModuleWithInteger {
+    @Provides Integer provideString() { return 1; }
+  }
+
+  @Test public void bothIncludesAndChildren() {
+    class TestEntryPoint {
+      @Inject String s;
+      @Inject Integer i;
+    }
+    @Module(
+        entryPoints = TestEntryPoint.class,
+        includes = ModuleWithInteger.class,
+        children = ModuleWithBinding.class)
+    class TestModule {
+    }
+
+    TestEntryPoint ep = injectWithModule(new TestEntryPoint(), new TestModule());
+    assertThat(ep.s).isEqualTo("injected");
+    assertThat(ep.i).isEqualTo(1);
+  }
+
+  private <T> T injectWithModule(T ep, Object ... modules) {
+    // TODO(cgruber): Make og.inject(foo) return foo properly.
+    ObjectGraph og = ObjectGraph.get(modules);
+    og.inject(ep);
+    return ep;
+  }
+
 }
/Fim/
diff --git a/example/src/main/java/coffee/DripCoffeeModule.java b/example/src/main/java/coffee/DripCoffeeModule.java
index 9102afd..40fbf94 100644
--- a/example/src/main/java/coffee/DripCoffeeModule.java
+++ b/example/src/main/java/coffee/DripCoffeeModule.java
@@ -5,13 +5,11 @@
 import javax.inject.Singleton;
 
 @Module(
-    entryPoints = CoffeeApp.class
+    entryPoints = CoffeeApp.class,
+    includes = PumpModule.class
 )
 class DripCoffeeModule {
   @Provides @Singleton Heater provideHeater() {
     return new ElectricHeater();
   }
-  @Provides Pump providePump(Thermosiphon pump) {
-    return pump;
-  }
 }
/Fim/
diff --git a/example/src/main/java/coffee/PumpModule.java b/example/src/main/java/coffee/PumpModule.java
new file mode 100644
index 0000000..e7c72d7
--- /dev/null
+++ b/example/src/main/java/coffee/PumpModule.java
@@ -0,0 +1,11 @@
+package coffee;
+
+import com.squareup.objectgraph.Module;
+import com.squareup.objectgraph.Provides;
+
+@Module(complete = false)
+class PumpModule {
+  @Provides Pump providePump(Thermosiphon pump) {
+    return pump;
+  }
+}
/Fim/
